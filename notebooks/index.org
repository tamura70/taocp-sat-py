#+TITLE: Knuth先生の『TAOCP 7.2.2.2 Satisfiability』を読む
#+AUTHOR: 田村直之

* はじめに
Donald E. Knuth 先生の名著 [[https://www-cs-faculty.stanford.edu/~knuth/taocp.html][The Art of Computer Programming]] (TAOCP)の
第4巻 Combinatorial Algorithms 中の 7.2.2.2 節 Satisfiability のプログラム等を提供している．
プログラムは [[https://mybinder.org][Binder]] あるいは [[https://colab.research.google.com][Google Colaboratory]] 上の [[http://jupyter.org][Jupyter]] ノートブックで実行可能である．

内容の補足については，以下を参照．

  - [[http://bach.istc.kobe-u.ac.jp/lect/taocp-sat/][Knuth先生の『TAOCP 7.2.2.2 Satisfiability』を読む]]

Knuth作のSATソルバーや関連するプログラムは以下から入手可能である．
  - [[https://www-cs-faculty.stanford.edu/~knuth/programs.html]]

ここでは，以下のWebページの方法でコンパイルしている．
  - [[http://bach.istc.kobe-u.ac.jp/lect/taocp-sat/install-knuth.html][Knuth版SATソルバーのインストール]]

** Binder上で実行する場合の注意点

- アカウントは不要．
- プログラムはすでにインストールされている．
- 20分程度操作をしないとセッションが停止するが12時間程度は設定が残っている．
  - つまり，12時間程度はノートブックに対するコンテナが残っている．
- セッションが停止すると自分が編集した内容は失われる．
  - 必要ならノートブック名を右クリックして自分のPCにDownloadしておく．

新しいセッションを開始するときは必ず以下を実行し prog フォルダに移動する．

#+BEGIN_SRC ipython :session
cd ~/prog
#+END_SRC

#+RESULTS:
:results:
# Out [1]: 
# output
/home/tamura/prog

:end:

** Google Colab上で実行する場合の注意点

- Googleアカウントが必要．
- プログラムのインストール作業が必要．
- 60分程度操作をしないとセッションが停止するが12時間程度は設定が残っている．
  - つまり，12時間程度はノートブックに対するコンテナが残っている．
  - ウィンドウ左側の「ファイル」でインストールしたファイルが残っていることを確認するとよい．残っていなければインストール作業を行う．
- ノートブックをGoogle Driveに保存することが可能．
  - まず最初に「ドライブにコピー」を実行するのがよい．

新しいセッションを開始するときは必ず以下を実行してプログラムをインストールする．

#+BEGIN_SRC ipython :session
%%bash
cd /content
wget -nc https://raw.githubusercontent.com/tamura70/taocp-sat-py/master/colab/setup.sh
sh setup.sh
cd prog
#+END_SRC

また，必ず以下を実行し prog フォルダに移動する．
#+BEGIN_SRC ipython :session
cd /content/prog
#+END_SRC

* 充足可能性

教科書4ページの式(6) [[../prog/rivest-unsat.sat][rivest-unsat.sat]] に対してKnuth作のSATソルバー sat13 を実行してみる．
#+BEGIN_SRC ipython :session
! sat13 < rivest-unsat.sat
#+END_SRC

以下のような出力結果が得られるはずだ．
#+BEGIN_EXAMPLE
(4 variables, 8 clauses, 24 literals successfully read)
UNSAT
Altogether 301+670 mems, 5804 bytes, 3 nodes, 3 clauses learned (ave 1.3->1.3), 60 memcells.
(2 clauses were subsumed on-the-fly.)
(1 restart.)
~
#+END_EXAMPLE

  - 充足不能を表す "=~=" の行は標準出力に，その他はピンク色の背景の標準エラーに出力されている．
    標準出力と標準エラー出力の順序は前後することがある．
  - 出力中の最初の行は，入力中の変数の個数，節の個数，リテラルの個数を表している．
  - "=301+670 mems=" は，メモリーアクセス回数を表す．
    =301= が前処理でのアクセス数， =670= が解探索でのアクセス数である．
  - "=5804 bytes=" は，メモリー使用量を表す．
  - "=3 nodes=" は，解探索で暗黙的に作成された探索木のノード数を表す．
  - "=3 clauses learned=" は，学習節の個数を表す．
  - その他については，sat13.pdf中の説明や教科書中の説明を参照すること．

次に，教科書4ページの式(7) [[../prog/rivest-sat.sat][rivest-sat.sat]] に対しても同様に実行してみる．
#+BEGIN_SRC ipython :session
! sat13 < rivest-sat.sat
#+END_SRC

  - 解の値割当てを表す "=3 ~1 2 4=" 以外の行は，標準エラーに出力されている．

各プログラムの詳細は，それぞれのPDFファイルを参照すること．
例えば [[../knuth/pdf/sat13.pdf][sat13.pdf]] には以下の説明がある．
  - 1ページ: 入力の形式
    + 変数名はASCIIコードで "=!=" から "=}=" の間 (つまり16進で22から7Cまで)の8文字以内の文字列で，
      "=~=" から始まらないもの
    + 変数名の直前に "=~=" を付けると否定を表す
    + "@<tt>~ @</tt>" から始まる行はコメント
  - 3ページ: オプションの説明
    + [[../knuth/sat-examples/README][knuth/sat-examples/README]] によれば，Knuthは以下のオプション指定を用いている．
      : $ sat13 h14 b10000 T50000000000 <file.sat

Scala版のプログラムを利用する場合は以下のようになる．
#+BEGIN_SRC ipython :session
! ./taocpsat SolverA < rivest-sat.sat
#+END_SRC

* 簡単な例 (A simple example)

$\textit{waerden}(3,3;9)$ が充足不能 (unsat)であることを，
入力ファイル [[../prog/waerden-3-3-9.sat][waerden-3-3-9.sat]] を用いて確かめる．
#+BEGIN_SRC ipython :session
! sat13 < waerden-3-3-9.sat
#+END_SRC

$\textit{waerden}(j,k;n)$ のCNF式を出力するプログラムは [[../knuth/pdf/sat-waerden.pdf][sat-waerden]] である．
#+BEGIN_SRC ipython :session
! sat-waerden 3 3 8
#+END_SRC

bashのパイプ (~|~)を用いて，以下のようにすれば sat13 の入力として与えることができる．
#+BEGIN_SRC ipython :session
! sat-waerden 3 3 8 | sat13
#+END_SRC

Scala版のプログラムを利用する場合は以下のようになる．
#+BEGIN_SRC ipython :session
! ./taocpsat waerden 3 3 8 | sat13
#+END_SRC

$(j,k,n)=(4,4,34)$ の解を探してみる．
#+BEGIN_SRC ipython :session
(j,k,n) = (4,4,34)
! sat-waerden $j $k $n | sat13
#+END_SRC

SATソルバーの結果からは，すぐにはどのような解が得られたのかがわからない．
Linuxのコマンドと組み合わせるなら以下のようにできる．
#+BEGIN_SRC ipython :session
# k,j,n を定義
(j,k,n) = (4,4,34)
! sat-waerden $j $k $n | sat13 | tr ' ' '\n' | grep -v '^~' | sort -n
#+END_SRC

Pythonのプログラムと組み合わせるなら以下のようにできる．
#+BEGIN_SRC ipython :session
(j,k,n) = (4,4,34)
# SATソルバーを実行しその結果を変数 result に代入する．標準エラー出力は別のファイルに保存してから表示している．
result = ! sat-waerden $j $k $n | sat13 2>/tmp/err
! cat /tmp/err
# result の最初の行を空白区切りで分割して"~"のついていないものだけ取り出し，変数 model に代入する．
model = [ lit for lit in result[0].strip().split(" ") if not lit.startswith("~") ]
# 整数のリストに変換しソートして表示する
nums = [ int(x) for x in model ]
nums.sort()
nums
#+END_SRC

#+BEGIN_SRC ipython :session
import sys
def waerden(j, k, n, f=sys.stdout):
  for d in range(1,n):
    for i in range(1,n):
      if i+(j-1)*d <= n:
        print(" ".join([str(i+a*d) for a in range(0,j)]), file=f)
  for d in range(1,n):
    for i in range(1,n):
      if i+(k-1)*d <= n:
        print(" ".join(["~"+str(i+a*d) for a in range(0,k)]), file=f)
#+END_SRC

#+BEGIN_SRC ipython :session
with open("/tmp/w.sat", "w") as f:
  waerden(3,3,8,f)
! sat13 </tmp/w.sat
#+END_SRC

* 厳密被覆 (Exact covering)

$\textit{langford}(n)$ の厳密被覆問題を出力するプログラムは [[../knuth/pdf/langford.pdf][langford]] である．
#+BEGIN_SRC ipython :session
! langford 3
#+END_SRC

これをCNF式に変換して sat13 の入力として与えるには以下のようにする．
#+BEGIN_SRC ipython :session
! langford 3 | sat-dance | sat13
#+END_SRC

結果から2, 7, 8のオプション，すなわち"d1 s2 s4", "d2 s3 s6", "d3 s1 s5"が選ばれていることがわかる．
これから解 "312132" が得られる．

$\textit{langford}'(n)$ の場合は以下のように実行する．
#+BEGIN_SRC ipython :session
! langford 3 | sat-dance-heule | sat13
#+END_SRC

* グラフ彩色 (Coloring a graph)

10次のMcGregorグラフを4彩色するには以下のようにする．
#+BEGIN_SRC ipython :session
! mcgregor-graph 10
! sat-color mcgregor10.gb 4 | sat13
#+END_SRC

結果を取り出すには以下のようにすれば良い．
#+BEGIN_SRC ipython :session
! mcgregor-graph 10
! sat-color mcgregor10.gb 4 | sat13 | tr ' ' '\n' | grep -v '^~' | sort -n
#+END_SRC

10次のMcGregorグラフの4彩色で色1が7回以下の彩色を求める．
#+BEGIN_SRC ipython :session
! mcgregor-graph 10
! sat-color mcgregor10.gb 4 > /tmp/mcg10.sat
! sat-threshold-sinz-graphs 110 7 mcgregor10.gb 1 > /tmp/mcg10le7.sat
! cat /tmp/mcg10.sat /tmp/mcg10le7.sat | sat13 | tr ' ' '\n' | grep -v '^[~S]' | grep '\.1$'
#+END_SRC

* 整数の因数分解 (Factoring integers)

#+BEGIN_SRC ipython :session
! cat prod-2-3-21-bchain.txt
#+END_SRC

#+BEGIN_SRC ipython :session
! ./taocpsat bchain encode <prod-2-3-21-bchain.txt | sat13
#+END_SRC

#+BEGIN_SRC ipython :session
! sat-dadda 2 3 21 | sat13
#+END_SRC

#+BEGIN_SRC ipython :session
! sat-dadda 15 15 1071514531 | sat13
#+END_SRC

#+BEGIN_SRC ipython :session
! sat-dadda 15 15 1071514531 | sat13 | ./taocpsat decode log X Y Z
#+END_SRC

#+BEGIN_SRC ipython :session
! ./taocpsat dadda factor_fifo 15 15 111111110111100000001110100011 | ./taocpsat bchain encode | sat13 | ./taocpsat decode log X Y Z
#+END_SRC

* 故障検査 (Fault testing)

#+BEGIN_SRC ipython :session
zs = [
  "00000000000000000000001010000000000000001000000000000000000000000000000000000000000000000000000000000",
  "10101110111111111111110111001011111111111010111111111101011111111111111011111111111111111111111111111",
  "01010000010101000100001000110001010100000000000101000010001101000000000000101000101000001000000000000",
  "01010000010000000101000000010001000101000000000100010000000100010101000000000000000001000001010000100",
  "10101111101010111010111111101110101010111111111011101111111011101011101111111111111110111110111011101"
]
#+END_SRC

#+BEGIN_SRC ipython :session
zs[1].count("0")
#+END_SRC

#+BEGIN_SRC ipython :session
z1 = [ j for j in range(1,100) if any([ zs[i][0] != zs[i][j] for i in range(0, len(zs)) ]) ]
len(z1)
#+END_SRC

#+BEGIN_SRC ipython :session
z2 = [ j for j in range(1,100) if all([ zs[i][0] == zs[i][j] for i in range(0, len(zs)) ]) ]
z2
#+END_SRC

#+BEGIN_SRC ipython :session
! ./taocpsat stuck list_patterns Y3,Y2,Y1,X2,X1 Z5,Z4,Z3,Z2,Z1 <prod-2-3-wires-bchain.txt
#+END_SRC

#+BEGIN_SRC ipython :session
! ./taocpsat stuck covering Y3,Y2,Y1,X2,X1 Z5,Z4,Z3,Z2,Z1 <prod-2-3-wires-bchain.txt
#+END_SRC

#+BEGIN_SRC ipython :session
! ./taocpsat stuck min_covering Y3,Y2,Y1,X2,X1 Z5,Z4,Z3,Z2,Z1 5 <prod-2-3-wires-bchain.txt | sat13 | tr ' ' '\n' | egrep '^[0-9]'
#+END_SRC

#+BEGIN_SRC ipython :session
! sed -e "s/^q' = .*$/q' = 0/" <prod-2-3-wires-bchain-stuck.txt | ./taocpsat bchain encode | sat13 | ./taocpsat decode log X Y
#+END_SRC

* Boole関数の学習 (Learning a Boolean function)

#+BEGIN_SRC ipython :session
(n,m,p) = (20,4,16)
! sat-synth-trunc-kluj $n $m {2*p} <table2.txt | sat13 | tr ' ' '\n' | grep -v '~' | grep '[-+]' | sort
#+END_SRC

* 有界モデル検査 (Bounded model checking)
  
#+BEGIN_SRC ipython :session
! sat-life-grid 7 15 3 >/tmp/slg3.sat
! sat-threshold-bb-life15 105 39 >/tmp/stb39.sat
! cat ../knuth/sat-examples/sources/7x15life3.dat /tmp/slg3.sat /tmp/stb39.sat | sat13 h10 | sat-life-filter
#+END_SRC

#+BEGIN_SRC ipython :session
! sat-life-grid 7 15 4 >/tmp/a.sat
! ./taocpsat life pattern d <life-sat.txt >/tmp/b.sat
! ./taocpsat life threshold_bb 7 15 38 a b c >/tmp/c.sat
! cat /tmp/a.sat /tmp/b.sat /tmp/c.sat >/tmp/d.sat
! sat13 h11 </tmp/d.sat | sat-life-filter
#+END_SRC

* (補足) 数独

#+BEGIN_SRC ipython :session
import sys

def p(i, j, a):
  return f"{i}.{j}.{a}"

def cell(i, j, f=sys.stdout):
  # 式(4)
  print(" ".join([ p(i,j,a) for a in range(1,9+1) ]), file=f)
  # 式(5)
  for a in range(1,9+1):
    for b in range(a+1,9+1):
      print(f"~{p(i,j,a)} ~{p(i,j,b)}", file=f)

def not_equal(i, j, k, l, f=sys.stdout):
  # 式(6)
  for a in range(1,9+1):
    print(f"~{p(i,j,a)} ~{p(k,l,a)}", file=f)

def equal(i, j, a, f=sys.stdout):
  print(p(i,j,a), file=f)

def sudoku_solver(puzzle):
  with open("/tmp/s.sat", "w") as f:
    # 式(4)(5)
    for i in range(0,9):
      for j in range(0,9):
        cell(i, j, f)
    # 式(6)
    for i in range(0,9):
      for j in range(0,9):
        for k in range(0,9):
          for l in range(0,9):
            if 9*i+j < 9*k+l:
              if i==k or j==l or (i//3==k//3 and j//3==l//3):
                not_equal(i, j, k, l, f)
    # 式(7)
    for i in range(0,9):
      for j in range(0,9):
        if puzzle[i][j] > 0:
          equal(i, j, puzzle[i][j], f)
  result = ! sat13 </tmp/s.sat 2>/tmp/err
  ! cat /tmp/err
  model = [ lit for lit in result[0].strip().split(" ") if not lit.startswith("~") ]
  sol = [ [0] * 9 for i in range(9) ]
  for [i,j,a] in [ lit.split(".") for lit in model ]:
    sol[int(i)][int(j)] = int(a)
  return sol
#+END_SRC

#+BEGIN_SRC ipython :session
puzzle = [
  [0,0,7,1,8,9,2,0,0],
  [0,9,0,0,0,0,0,6,0],
  [8,0,0,0,0,0,0,0,9],
  [0,1,0,0,0,0,0,0,0],
  [0,0,6,7,4,1,8,0,0],
  [0,0,0,0,0,0,0,2,0],
  [9,0,0,0,0,0,0,0,5],
  [0,2,0,0,0,0,0,3,0],
  [0,0,4,8,7,6,9,0,0]
]
sudoku_solver(puzzle)
#+END_SRC

* (補足) 有限オートマトン

#+BEGIN_SRC ipython :session
from graphviz import Digraph

g = Digraph('NFA1')
g.attr(rankdir='LR')
g.node(' ', shape='plaintext')
g.node('q0', shape='circle')
g.node('q1', shape='doublecircle')
g.edge(' ', 'q0')
g.edge('q0', 'q0', label='0')
g.edge('q0', 'q1', label='1')
g.edge('q1', 'q1', label='0')
g
#+END_SRC

遷移規則 ($i=0,1,\ldots,n-1$)
- $(s_i=q_0 \land x_i=0) \Rightarrow (s_{i+1}=q_0)$
- $(s_i=q_0 \land x_i=1) \Rightarrow (s_{i+1}=q_1)$
- $(s_i=q_1 \land x_i=0) \Rightarrow (s_{i+1}=q_1)$
- $(s_i=q_1 \land x_i=1) \Rightarrow 0$

初期状態
- $s_0=q_0$

終了状態
- $s_n=q_1$

#+BEGIN_SRC ipython :session
from graphviz import Digraph

g = Digraph('NFA2')
g.attr(rankdir='LR')
g.node(' ', shape='plaintext')
g.node('q0', shape='circle')
g.node('q1', shape='circle')
g.node('q2', shape='doublecircle')
g.edge(' ', 'q0')
g.edge('q0', 'q0', label='0')
g.edge('q0', 'q1', label='1')
g.edge('q1', 'q2', label='1')
g.edge('q2', 'q2', label='0')
g
#+END_SRC

遷移規則 ($i=0,1,\ldots,n-1$)
- $(s_i=q_0 \land x_i=0) \Rightarrow (s_{i+1}=q_0)$
- $(s_i=q_0 \land x_i=1) \Rightarrow (s_{i+1}=q_1)$
- $(s_i=q_1 \land x_i=0) \Rightarrow 0$
- $(s_i=q_1 \land x_i=1) \Rightarrow (s_{i+1}=q_2)$
- $(s_i=q_2 \land x_i=0) \Rightarrow (s_{i+1}=q_2)$
- $(s_i=q_2 \land x_i=1) \Rightarrow 0$

初期状態
- $s_0=q_0$

終了状態
- $s_n=q_2$

#+BEGIN_SRC ipython :session
import sys

def p(k, i, j):
  return f"p{k}.{i}.{j}"

def nfa1(k, x, f=sys.stdout):
  print(p(k,0,0), file=f)
  print(p(k,len(x),1), file=f)
  for i in range(len(x)):
    print(f"~{p(k,i,0)} {x[i]} {p(k,i+1,0)}", file=f)
    print(f"~{p(k,i,0)} ~{x[i]} {p(k,i+1,1)}", file=f)
    print(f"~{p(k,i,1)} {x[i]} {p(k,i+1,1)}", file=f)
    print(f"~{p(k,i,1)} ~{x[i]}", file=f)
  for i in range(len(x)+1):
    # p(k,i,0)+p(k,i,1)=1 の条件が必要
    print(f"{p(k,i,0)} {p(k,i,1)}", file=f)
    print(f"~{p(k,i,0)} ~{p(k,i,1)}", file=f)

def nfa2(k, x, f=sys.stdout):
  print(p(k,0,0), file=f)
  print(p(k,len(x),2), file=f)
  for i in range(len(x)):
    print(f"~{p(k,i,0)} {x[i]} {p(k,i+1,0)}", file=f)
    print(f"~{p(k,i,0)} ~{x[i]} {p(k,i+1,1)}", file=f)
    print(f"~{p(k,i,1)} {x[i]}", file=f)
    print(f"~{p(k,i,1)} ~{x[i]} {p(k,i+1,2)}", file=f)
    print(f"~{p(k,i,2)} {x[i]} {p(k,i+1,2)}", file=f)
    print(f"~{p(k,i,2)} ~{x[i]}", file=f)
  for i in range(len(x)+1):
    # p(k,i,0)+p(k,i,1)+p(k,i,2)=1 の条件が必要
    print(f"{p(k,i,0)} {p(k,i,1)} {p(k,i,2)}", file=f)
    print(f"~{p(k,i,0)} ~{p(k,i,1)}", file=f)
    print(f"~{p(k,i,0)} ~{p(k,i,2)}", file=f)
    print(f"~{p(k,i,1)} ~{p(k,i,2)}", file=f)
#+END_SRC

#+BEGIN_SRC ipython :session
with open("/tmp/n.sat", "w") as f:
  nfa2(1, ["x0.0","x0.1","x0.2","x0.3"], f)
  nfa1(2, ["x1.0","x1.1","x1.2","x1.3"], f)
  nfa2(3, ["x2.0","x2.1","x2.2","x2.3"], f)
  nfa1(4, ["x3.0","x3.1","x3.2","x3.3"], f)
  nfa2(5, ["x0.0","x1.0","x2.0","x3.0"], f)
  nfa1(6, ["x0.1","x1.1","x2.1","x3.1"], f)
  nfa2(7, ["x0.2","x1.2","x2.2","x3.2"], f)
  nfa1(8, ["x0.3","x1.3","x2.3","x3.3"], f)
  # print("x0.0", file=f)
! sat13 </tmp/n.sat | tr ' ' '\n' | grep x | sort
#+END_SRC

